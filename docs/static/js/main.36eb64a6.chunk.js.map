{"version":3,"sources":["components/Header.js","components/HeroCards.js","components/Characters.js","components/SingleHero.js","components/AboutHero.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","src","alt","HeroCards","props","img_hero","path","extension","name","id","description","length","substr","Characters","handleOnChange","event","target","value","setState","showList","list","searchInput","handleOnChangePage","page","getList","state","url","apiKey","characters","currentPage","fetch","this","then","response","json","data","console","log","results","Fragment","type","placeholder","aria-label","onChange","e","role","defaultPageSize","total","pageSize","map","character","thumbnail","key","includes","bind","React","Component","comics","items","item","index","AboutHero","useState","useEffect","match","params","SingleHero","App","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36eb64a6.chunk.js","sourcesContent":["import React from 'react'\nimport {NavLink} from \"react-router-dom\";\n\nfunction Header() {\n    return (\n      <header className=\"title\">\n        <div className=\"pt-4 header--home\">\n          <NavLink to=\"/\" className=\"header--text\">Home</NavLink>\n        </div>\n        <img src=\"https://upload.wikimedia.org/wikipedia/fr/a/a4/Logo_Marvel_Comics.jpg\" alt=\"marvel-logo\" className=\"logo-marvel\"></img>\n      </header>\n    )\n}\n\nexport default Header","import React from \"react\"\nimport {Link} from \"react-router-dom\";\n\nfunction HeroCards(props) {\n  return (\n    <div className=\"col-xl-3 mr-2\">\n      <div className=\"card\">\n        <img src={`${props.img_hero.path}.${props.img_hero.extension}`} className=\"card-img-list\" alt=\"...\"/>\n        <div className=\"card-body\">\n          <h5 className=\"card-title\"> {props.name}</h5>\n          <p>(#{props.id})</p>\n          { (function() {\n            if (props.description.length > 200) {\n              return <p className=\"card-text\">{props.description.substr(0, 50)} (...)</p>\n            } else if (props.description.length === 0) {\n              return <p className=\"card-text-not-available\">No description available.</p>\n            } else {\n              return <p className=\"card-text\">{props.description}</p>\n            }\n          }) ()\n          }\n          <button className=\"btn btn-secondary\">\n            <Link to={`/about/${props.id}`} className=\"link--to--go\">More informations</Link>\n          </button>\n        </div>\n      </div>\n    </div>\n    )\n}\n\nexport default HeroCards","import React from \"react\"\nimport HeroCards from \"./HeroCards\"\nimport Pagination from 'rc-pagination';\nimport 'rc-pagination/assets/index.css';\n\nclass Characters extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      url: \"https://gateway.marvel.com/\",\n      // apiKey: \"f5d9657d8bb68f805b1ec30fe13cf70d\",\n      apiKey: \"d87aaf099d9bdee47146e7c016069624\",\n      // apiKey: \"e3eee8b3d6211e3f201b421f6c596e939fd449b9\",\n      characters: null,\n      showList: {\n        list: true,\n        searchInput: \"\",\n      },\n      currentPage: 1\n    };\n  }\n\n  getList(page) {\n    fetch(`${this.state.url}v1/public/characters?apikey=${this.state.apiKey}&limit=10&offset=${page * 10}`)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n      this.setState({\n        characters: data.data.results\n      })\n    })\n\n  }\n\n  componentDidMount() {\n    this.getList(this.currentPage)\n  }\n\n  handleOnChange = (event) => {\n    if (event.target.value.length !== \"\") {\n      this.setState({\n        showList: {\n          list: false,\n          searchInput: event.target.value,\n        }\n      })\n    } else {\n      this.setState({\n        showList: {\n          list: true,\n          searchInput: \"\",\n        }\n      })\n    }\n  }\n\n  handleOnChangePage = (page) => {\n    this.getList(page)\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <div className=\"banner\">\n        <div className=\"search--bar\">\n          <input\n          className=\"form-control search--bar--input\"\n          type=\"text\"\n          placeholder=\"Search your Hero\"\n          aria-label=\"Search\"\n          onChange={e => this.handleOnChange(e) }\n          />\n          <p className=\"search--bar--input--hint\">(Don't forget: a name begins with an uppercase. <span role=\"img\" aria-label=\"\">ðŸ˜‰</span>)</p>\n        </div>\n      </div>\n        <div className=\"container container--cards\">\n          <div className=\"pagination\">\n            <Pagination onChange={page => this.getList(page)} defaultPageSize={10} total={1000} pageSize={10}  />\n          </div>\n          <div className=\"row\">\n            { (function() {\n              if(this.state.characters === null) {\n                return <i className=\"fa fa-spinner\"></i>\n              }\n              if(this.state.characters !== null) {\n                if (this.state.showList.list) {\n                  return this.state.characters.map(character => {\n                    return <HeroCards name={character.name} id={character.id} description={character.description} img_hero={character.thumbnail} key={character.name} />\n                  })\n                }\n                if (!this.state.showList.list) {\n                  return this.state.characters.map(character => {\n                    return character.name.includes(this.state.showList.searchInput) ? <HeroCards name={character.name} id={character.id} description={character.description} img_hero={character.thumbnail} key={character.id} /> : null\n                  })\n                }\n              }\n            }).bind(this) ()\n          }\n          </div>\n        </div>\n      </React.Fragment>\n    )}\n}\n\nexport default Characters\n","import React from \"react\"\n\nfunction HeroCards(props) {\n  return (\n    <div className=\"col-xl-12 mb-3 about--hero\">\n      <div className=\"col-xl-6 about--hero--img\">\n        <img src={`${props.img_hero.path}.${props.img_hero.extension}`} className=\"card--img--single\" alt=\"...\"/>\n      </div>\n        <div className=\"col-xl-6 about--hero--infos\">\n          <h5 className=\"about--hero--name\"> {props.name}</h5>\n          <p className=\"about--hero--description\">{props.description}</p>\n          <strong>Comics:</strong>\n          {\n            props.comics.items.map((item, index) => {\n              return (\n              <li>\n                {props.comics.items[index].name}\n              </li>\n              )\n            })\n          }\n      </div>\n    </div>\n  )\n}\n\nexport default HeroCards","import React, {useEffect, useState} from \"react\";\nimport SingleHero from './SingleHero';\n\nconst AboutHero = props => {\n  const [state, setState] = useState({\n    characters: null\n  });\n\n  useEffect(() => {\n    const url = \"https://gateway.marvel.com/\"\n    const apiKey = \"d87aaf099d9bdee47146e7c016069624\"\n\n    fetch(`${url}v1/public/characters/${props.match.params.id}?apikey=${apiKey}`)\n      .then(response => response.json())\n      .then(data => setState({characters: data.data.results}))\n    }, []);\n\n  return (\n    <div>\n      {state.characters === null ?\n        \"loading\" :\n        <SingleHero\n          name={state.characters[0].name}\n          id={state.characters[0].id}\n          description={state.characters[0].description}\n          img_hero={state.characters[0].thumbnail}\n          comics={state.characters[0].comics}\n          key={state.characters[0].id}\n        />\n      }\n    </div>\n  );\n};\n\nexport default AboutHero;","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\"\nimport Characters from \"./components/Characters\"\nimport AboutHero from \"./components/AboutHero\"\nimport {\n  Route,\n  HashRouter\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div className=\"container App\">\n        <Header/>\n        <Route exact path=\"/\" component={Characters}/>\n        <Route exact path=\"/about/:id\" component={AboutHero}/>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}